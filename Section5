Lecture 1:
Using the low-level cache API::
--Using the low-level cache API
The low-level cache API allows you to store objects in the cache with any granularity.
--It is located at django.core.cache. You can import it like this:
from django.core.cache import cache

Open the shell with the command
python manage.py shell and execute the following code:
>>> from django.core.cache import cache
>>> cache.set('musician', 'Django Reinhardt', 20)

--You access the default cache backend and use set(key, value, timeout) to store
a key named 'musician' with a value that is the string 'Django Reinhardt' for 20
seconds. If you don't specify a timeout, Django uses the default timeout specified for
the cache backend in the CACHES setting

-->>> cache.get('musician')
'Django Reinhardt'

--You retrieve the key from the cache. Wait for 20 seconds and execute the same code:
>>> cache.get('musician')
No value is returned this time. The 'musician' cache key has expired and the get()
method returns None because the key is not in the cache anymore.

NB:
Always avoid storing a None value in a cache key because
you won't be able to distinguish between the actual value and
a cache miss.

Let's cache a QuerySet with the following code:
>>> from courses.models import Subject
>>> subjects = Subject.objects.all()
>>> cache.set('my_subjects', subjects)
You perform a QuerySet on the Subject model and store the returned objects in the
'my_subjects' key. Let's retrieve the cached data:
>>> cache.get('my_subjects')
<QuerySet [<Subject: Mathematics>, <Subject: Music>, <Subject: Physics>,
<Subject: Programming>]>

--cache some queries in your views

--Run the development server and open http://127.0.0.1:8000/ in your browser.
When the view is executed, the cache key is not found and the QuerySet is
executed. Open http://127.0.0.1:8000/admin/ in your browser and click on the
Memcached section to expand the statistics. You should see usage data for the cache
that is similar to the following screen

--Take a look at Curr Items, which should be 1. This shows that there is one item
currently stored in the cache. Get Hits shows how many get commands were
successful and Get Misses shows the get requests for keys that are missing.
The Miss Ratio is calculated using both of them

--Next, navigate back to http://127.0.0.1:8000/ using your browser and reload the
page several times. If you take a look at the cache statistics now, you will see several
more reads.

Lecture 2:
Caching based on dynamic data::
--Often, you will want to cache something that is based on dynamic data. In these
cases, you have to build dynamic keys that contain all the information required to
uniquely identify the cached data.

--It is important to note that you can't use a cached QuerySet to build other QuerySets,
since what you cached are actually the results of the QuerySet. So you can't do the
following:
courses = cache.get('all_courses')
courses.filter(subject=subject)
Instead, you have to create the base QuerySet Course.objects.annotate(total_
modules=Count('modules')), which is not going to be executed until it
is forced, and use it to further restrict the QuerySet with all_courses.
filter(subject=subject) in case the data was not found in the cache.

Lecture 3:
Caching template fragments:
--Caching template fragments is a higher-level approach. You need to load the cache
template tags in your template using {% load cache %}. Then, you will be able to
use the {% cache %} template tag to cache specific template fragments.

{% cache 300 fragment_name %}
...
{% endcache %}

--The {% cache %} template tag has two required arguments: the timeout in seconds
and a name for the fragment. If you need to cache content depending on dynamic
data, you can do so by passing additional arguments to the {% cache %} template
tag to uniquely identify the fragment.

--If the USE_I18N setting is set to True, the per-site middleware
cache will respect the active language. If you use the {% cache
%} template tag, you have to use one of the translation-specific
variables available in templates to achieve the same result, such
as {% cache 600 name request.LANGUAGE_CODE %}.

Lecture 5:
Caching views::
--You can cache the output of individual views using the cache_page decorator
located at django.views.decorators.cache. The decorator requires a timeout
argument (in seconds)
--The per-view cache uses the URL to build the cache key. Multiple
URLs pointing to the same view will be cached separately.

Using the per-site cache::
--This is the highest-level cache. It allows you to cache your entire site. To
allow the per-site cache, edit the settings.py file of your project and add
the UpdateCacheMiddleware and FetchFromCacheMiddleware classes to
the MIDDLEWARE setting.

--UpdateCacheMiddleware
is placed before CommonMiddleware because it runs during response time, when
middleware are executed in reverse order. FetchFromCacheMiddleware is placed
after CommonMiddleware intentionally because it needs to access request data set by
the latter.

--Your site will now cache and return cached content for all GET requests.

--You have done this to test the per-site cache functionality. However, the per-site
cache is not suitable for you, since the course management views need to show
updated data to instantly reflect any changes. The best approach to follow in your
project is to cache the templates or views that are used to display course contents to
students.

--You have seen an overview of the methods provided by Django to cache data.
You should define your cache strategy wisely and prioritize the most expensive
QuerySets or calculations.




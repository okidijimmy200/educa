Building an API::
In this chapter, you will:
• Install Django REST framework
• Create serializers for your models
• Build a RESTful API
• Create nested serializers
• Build custom API views
• Handle API authentication
• Add permissions to API views
• Create a custom permission
• Implement viewsets and routers
• Use the Requests library to consume the API

Lecture 1:
Building a RESTful API
--When building an API, there are several ways you can structure its endpoints and
actions, but following REST principles is encouraged. The REST architecture comes
from Representational State Transfer. RESTful APIs are resource-based; your
models represent resources and HTTP methods such as GET, POST, PUT, or DELETE
are used to retrieve, create, update, or delete objects. HTTP response codes are also
used in this context. Different HTTP response codes are returned to indicate the
result of the HTTP request, for example, 2XX response codes for success, 4XX for
errors, and so on.

The most common formats to exchange data in RESTful APIs are JSON and XML.
You will build a RESTful API with JSON serialization for your project.

Your API
will provide the following functionality:
• Retrieve subjects
• Retrieve available courses
• Retrieve course contents
• Enroll on a course

Installing Django Rest Framework:
*******pip install djangorestframework==3.11.0***********


--The DEFAULT_PERMISSION_CLASSES setting specifies
the default permissions to read, create, update, or delete objects. You set
DjangoModelPermissionsOrAnonReadOnly as the only default permission class.
This class relies on Django's permissions system to allow users to create, update,
or delete objects, while providing read-only access for anonymous users

Lecture 2:
Defining serializers::
--After setting up REST framework, you need to specify how your data will be
serialized. Output data has to be serialized in a specific format, and input data
will be deserialized for processing.

The framework provides the following classes
to build serializers for single objects:
• Serializer: Provides serialization for normal Python class instances
• ModelSerializer: Provides serialization for model instances
• HyperlinkedModelSerializer: The same as ModelSerializer, but it
represents object relationships with links rather than primary keys

****python manage.py shell******

--run
>>> from courses.models import Subject
>>> from courses.api.serializers import SubjectSerializer
>>> subject = Subject.objects.latest('id')
>>> serializer = SubjectSerializer(subject)
>>> serializer.data
{'id': 4, 'title': 'Programming', 'slug': 'programming'}

--you get a Subject object, create an instance of SubjectSerializer,
and access the serialized data. You can see that the model data is translated into
Python native data types.
Building an API::
In this chapter, you will:
• Install Django REST framework
• Create serializers for your models
• Build a RESTful API
• Create nested serializers
• Build custom API views
• Handle API authentication
• Add permissions to API views
• Create a custom permission
• Implement viewsets and routers
• Use the Requests library to consume the API

Lecture 1:
Building a RESTful API
--When building an API, there are several ways you can structure its endpoints and
actions, but following REST principles is encouraged. The REST architecture comes
from Representational State Transfer. RESTful APIs are resource-based; your
models represent resources and HTTP methods such as GET, POST, PUT, or DELETE
are used to retrieve, create, update, or delete objects. HTTP response codes are also
used in this context. Different HTTP response codes are returned to indicate the
result of the HTTP request, for example, 2XX response codes for success, 4XX for
errors, and so on.

The most common formats to exchange data in RESTful APIs are JSON and XML.
You will build a RESTful API with JSON serialization for your project.

Your API
will provide the following functionality:
• Retrieve subjects
• Retrieve available courses
• Retrieve course contents
• Enroll on a course

Installing Django Rest Framework:
*******pip install djangorestframework==3.11.0***********


--The DEFAULT_PERMISSION_CLASSES setting specifies
the default permissions to read, create, update, or delete objects. You set
DjangoModelPermissionsOrAnonReadOnly as the only default permission class.
This class relies on Django's permissions system to allow users to create, update,
or delete objects, while providing read-only access for anonymous users

Lecture 2:
Defining serializers::
--After setting up REST framework, you need to specify how your data will be
serialized. Output data has to be serialized in a specific format, and input data
will be deserialized for processing.

The framework provides the following classes
to build serializers for single objects:
• Serializer: Provides serialization for normal Python class instances
• ModelSerializer: Provides serialization for model instances
• HyperlinkedModelSerializer: The same as ModelSerializer, but it
represents object relationships with links rather than primary keys

****python manage.py shell******

--run
>>> from courses.models import Subject
>>> from courses.api.serializers import SubjectSerializer
>>> subject = Subject.objects.latest('id')
>>> serializer = SubjectSerializer(subject)
>>> serializer.data
{'id': 4, 'title': 'Programming', 'slug': 'programming'}

--you get a Subject object, create an instance of SubjectSerializer,
and access the serialized data. You can see that the model data is translated into
Python native data types.

Lecture 3:
Understanding parsers and renderers::
--The serialized data has to be rendered in a specific format before you return it in
an HTTP response.
--when you get an HTTP request, you have to parse the
incoming data and deserialize it before you can operate with it. REST framework
includes renderers and parsers to handle that

Let's see how to parse incoming data. Execute the following code in the Python shell:
>>> from io import BytesIO
>>> from rest_framework.parsers import JSONParser
>>> data = b'{"id":4,"title":"Programming","slug":"programming"}'
>>> JSONParser().parse(BytesIO(data))
{'id': 4, 'title': 'Programming', 'slug': 'programming'}

--Given a JSON string input, you can use the JSONParser class provided by REST
framework to convert it to a Python object.

--REST framework also includes Renderer classes that allow you to format API
responses. The framework determines which renderer to use through content
negotiation by inspecting the request's Accept header to determine the expected
content type for the response. Optionally, the renderer is determined by the format
suffix of the URL.

run shell
>>> from rest_framework.renderers import JSONRenderer
>>> JSONRenderer().render(serializer.data)

You will see the following output:
b'{"id":4,"title":"Programming","slug":"programming"}'

--You use the JSONRenderer to render the serialized data into JSON. By
default, REST framework uses two different renderers: JSONRenderer and
BrowsableAPIRenderer.

Lecture 4:
Building list and detail views:
--REST framework comes with a set of generic views and mixins that you can use to
build your API views. They provide the functionality to retrieve, create, update, or
delete model objects.

*****curl http://127.0.0.1:8000/api/subjects/**********

Lecture 5:
Creating nested serializers::
--Let's take a look at how a Course object is serialized. Open the shell, run python
manage.py shell,
>>> from rest_framework.renderers import JSONRenderer
>>> from courses.models import Course
>>> from courses.api.serializers import CourseSerializer
>>> course = Course.objects.latest('id')
>>> serializer = CourseSerializer(course)
>>> JSONRenderer().render(serializer.data)

--will get a JSON object with the fields that you included in CourseSerializer.
You can see that the related objects of the modules manager are serialized as a list
of primary keys, as follows:
"modules": [6, 7, 9, 10]
Going Live::
• Configuring a production environment
• Creating a custom middleware
• Implementing custom management commands

Lecture 1:
Creating a production environment::
• Configure project settings for a production environment
• Use a PostgreSQL database
• Set up a web server with uWSGI and NGINX
• Serve static assets through NGINX
• Secure connections using SSL
• Use Daphne to serve Django Channels

Managing settings for multiple environments::
--In real-world projects, you will have to deal with multiple environments. You
will have at least a local and a production environment, but you could have other
environments as well, such as testing or preproduction environments. Some project
settings will be common to all environments, but others will have to be overridden
per environment.

Create a settings/ directory next to the settings.py file of the educa project.
Rename the settings.py file to base.py and move it into the new settings/
directory

These files are as follows:
• base.py: The base settings file that contains common settings (previously
settings.py)
• local.py: Custom settings for your local environment
• pro.py: Custom settings for the production environment

--replace base_dir of base.py wuth 
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(
os.path.join(__file__, os.pardir))))

--NB:
When handling multiple environments, create a base settings file
and a settings file for each environment. Environment settings files
should inherit the common settings and override environmentspecific
settings.

--You will not be able to execute any commands with the manage.
py tool unless you specify the settings module to use. You will need to add a
--settings flag when you run management commands from the shell or set a
DJANGO_SETTINGS_MODULE environment variable

******set DJANGO_SETTINGS_MODULE=educa.settings.pro**********

--If you want to avoid executing this command for each new shell,
add this command to your shell's configuration in the .bashrc or .bash_profile
files. If you don't set this variable, you will have to run management commands,
including the --settings flag, as follows.

********python manage.py shell --settings=educa.settings.pro*******

Using PostgreSQL::
--Let's create a PostgreSQL user. Open the shell and run the following commands to
create a database user:
--educa

******python manage.py migrate --settings=educa.settings.pro*********

*******python manage.py createsuperuser --settings=educa.settings.pro******

Lecture 2:
Checking your project:
--Django includes the check management command for checking your project at any
time. This command inspects the applications installed in your Django project and
outputs any errors or warnings.

--If you include the --deploy option, additional
checks only relevant for production use will be triggered.

********python manage.py check --deploy --settings=educa.settings.pro*************

--You will see output with no errors, but several warnings. This means the check was
successful, but you should go through the warnings to see if there is anything more
you can do to make your project safe for production.

Serving Django through WSGI::
--Django's primary deployment platform is WSGI. WSGI stands for Web Server
Gateway Interface and it is the standard for serving Python applications on the web.

Installing uWSGI::
--you need a real web server for
deploying your application in a production environment instead of django development server.

--uWSGI is an extremely fast Python application server. It communicates with your
Python application using the WSGI specification. uWSGI translates web requests
into a format that your Django project can process

********pip install uwsgi==2.0.18*******

--uWSGI, you will need a C compiler, such as gcc or clang.

Configuring uWSGI::
uwsgi --module=educa.wsgi:application \
--env=DJANGO_SETTINGS_MODULE=educa.settings.pro \
--master --pidfile=/tmp/project-master.pid \
--http=127.0.0.1:8000 \
--uid=1000

--With this command, you can run uWSGI on your localhost with the following
options:
• You use the educa.wsgi:application WSGI callable
• You load the settings for the production environment


--You can see the rendered HTML that corresponds to the course list view, but no
CSS style sheets or images are being loaded. The reason for this is that you didn't
configure uWSGI to serve static files. You will configure serving static files in the
production environment later.

--uWSGI allows you to define a custom configuration in a .ini file. This is more
convenient than passing options through the command line.

--The socket option is intended for communication with some third-party router,
such as NGINX, while the http option is for uWSGI to accept incoming HTTP
requests and route them by itself. You are going to run uWSGI using a socket,
since you are going to configure NGINX as your web server and communicate
with uWSGI through the socket.

********uwsgi --ini config/uwsgi.ini************

Installing NGINX::
--When you are serving a website, you have to serve dynamic content, but you also
need to serve static files, such as CSS style sheets, JavaScript files, and images. While
uWSGI is capable of serving static files, it adds an unnecessary overhead to HTTP
requests and therefore, it is encouraged to set up a web server, such as NGINX,
in front of it.
--NGINX is a web server focused on high concurrency, performance, and low
memory usage. NGINX also acts as a reverse proxy, receiving HTTP requests and
routing them to different backends. As mentioned, generally, you will use a web
server, such as NGINX, in front of uWSGI for serving static files efficiently and
quickly, and you will forward dynamic requests to uWSGI workers.

********sudo apt-get install nginx*********

*******sudo nginx*************

****http://127.0.0.1********

--The following will happen when the client browser sends an HTTP request:
1. NGINX receives the HTTP request
2. NGINX delegates the request to uWSGI through a socket
3. uWSGI passes the request to Django for processing
4. Django returns an HTTP response that is passed back to NGINX, which
in turn passes it back to the client browser

--Configuring NGINX::

Lecture 1:
Adding permissions to views::
REST framework includes a permission system to restrict access to views. Some
of the built-in permissions of REST framework are:
• AllowAny: Unrestricted access, regardless of whether a user is authenticated
or not.
• IsAuthenticated: Allows access to authenticated users only.
• IsAuthenticatedOrReadOnly: Complete access to authenticated users.
Anonymous users are only allowed to execute read methods such as GET,
HEAD, or OPTIONS.
• DjangoModelPermissions: Permissions tied to django.contrib.auth. The
view requires a queryset attribute. Only authenticated users with model
permissions assigned are granted permission.
• DjangoObjectPermissions: Django permissions on a per-object basis.

If users are denied permission, they will usually get one of the following HTTP
error codes:
• HTTP 401: Unauthorized
• HTTP 403: Permission denied

****http://127.0.0.1:8000/api/courses/1/enroll/******
--You can access the administration site and check that the user is now enrolled on
the course.

Lecture 2:
Creating viewsets and routers::
--ViewSets allow you to define the interactions of your API and let REST framework
build the URLs dynamically with a Router object. By using viewsets, you can
avoid repeating logic for multiple views.
--Viewsets include actions for the following
standard operations:
• Create operation: create()
• Retrieve operation: list() and retrieve()
• Update operation: update() and partial_update()
• Delete operation: destroy()

--You create a DefaultRouter object and register your viewset with the courses
prefix. The router takes charge of generating URLs automatically for your viewset.

-open http://127.0.0.1:8000/api/ in your browser. You will see that the router
lists all viewsets in its base URL,

--You can access http://127.0.0.1:8000/api/courses/ to retrieve the list of
courses.

Adding additional actions to viewsets::
--You can add extra actions to viewsets. Let's change your previous
CourseEnrollView view into a custom viewset action.

Lecture 3:
Creating custom permissions::
--You want students to be able to access the contents of the courses they are enrolled
on. Only students enrolled on a course should be able to access its contents. The best
way to do this is with a custom permission class. Django provides a BasePermission
class that allows you to define
• has_permission(): View-level permission check
• has_object_permission(): Instance-level permission check

--Create a new file inside the courses/api/ directory and name it permissions.py

Serializing course contents::
--You need to serialize course contents. The Content model includes a generic foreign
key that allows you to associate objects of different content models.

--Open http://127.0.0.1:8000/api/courses/1/contents/ in your browser.
If you access the view with the right credentials, you will see that each module
of the course includes the rendered HTML for course contents

--REST framework also allows you to handle creating
and editing objects with the ModelViewSet viewset

Lecture 4:
Consuming the RESTful API::
--You are going to create a simple Python application that uses the RESTful API to
retrieve all available courses and then enrolls a student on all of them. You will learn
how to authenticate against the API using HTTP basic authentication, and perform
GET and POST requests.
--You will use the Python Requests library to consume the API. Requests is the
most popular HTTP library for Python. It abstracts the complexity of dealing with
HTTP requests and provides a very simple interface to consume HTTP services.

*******pip install requests==2.23***********


****python manage.py runserver********

In another shell, run the following command from the api_examples/ directory:
*********python enroll_all.py********
--You will see output with a list of all course titles
Available courses: Django course, Course1

Run the following command from the api_examples/ directory:
python enroll_all.py
You will now see output like this:
Available courses: Introduction to Django, Python for beginners, Algebra
basics
Successfully enrolled in Introduction to Django
Successfully enrolled in Python for beginners
Successfully enrolled in Algebra basics


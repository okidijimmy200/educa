Lecture 1:
Enabling a channel layer::
--Channel layers allow you to communicate between different instances of an
application. A channel layer is the transport mechanism that allows multiple
consumer instances to communicate with each other and with other parts of Django.

Channels and groups:
Channel layers provide two abstractions to manage communications: channels
and groups:
• Channel: You can think of a channel as an inbox where messages can be
sent to or as a task queue. Each channel has a name. Messages are sent
to a channel by anyone who knows the channel name and then given to
consumers listening on that channel.
• Group: Multiple channels can be grouped into a group. Each group has
a name. A channel can be added or removed from a group by anyone
who knows the group name. Using the group name, you can also send
a message to all channels in the group.

Setting up a channel layer with Redis:
--Redis works as the communication store for the channel layer

Lecture 2:
Updating the consumer to broadcast message:
You will edit the ChatConsumer consumer to use the channel layer. You will use
a channel group for each course chat room. Therefore, you will use the course id
to build the group name. ChatConsumer instances will know the group name and
will be able to communicate with each other

--When you receive a message from the WebSocket connection, instead of sending the
message to the associated channel, you now send the message to the group. You do
this by calling the group_send() method of the channel layer. You use the async_
to_sync() wrapper to use the channel layer asynchronous method.

*********pip install channels-redis==2.4.2**********

--open up the redis server

-To verify that the channel layer can communicate with Redis

>>> import channels.layers
>>> from asgiref.sync import async_to_sync
>>> channel_layer = channels.layers.get_channel_layer()
>>> async_to_sync(channel_layer.send)('test_channel', {'message':'hello'})
>>> async_to_sync(channel_layer.receive)('test_channel')

Lecture 2:
Adding context to the messages:
--how to display who sent which message and when it was sent
Modifying the consumer to be fully asynchronous::
--rewrite the ChatConsumer class to be asynchronous.

Integrating the chat application with existing views:
--link for students to join the chat room for each course


